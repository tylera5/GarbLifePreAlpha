<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>2</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>globalvar garbThrowCount;

walkSpeed = 4;
jumpSpeed = -12;
grav = 2;

horizontalSpeed = 0;
verticalSpeed = 0;
ground = 1;

combRoll = 0;
combRollCount = 0;

garbThrowBool = 0;
garbThrowCount = 0;

TEOGARBBOOL = 0;
teoGarbBool = 0;
teoGarbJumpCounter = 0;
teoGarbJumpBool = 0;
explosionMeetBool = 0;

sprite_index = GarbRight;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>RIGHT = keyboard_check(vk_right);
LEFT = keyboard_check(vk_left);
SPACE = keyboard_check_pressed(vk_space);
SPACE_RELEASED = keyboard_check_released(vk_space);
COMBAT_ROLL = keyboard_check_pressed(ord('X'));
GARBAGEBAG = keyboard_check_pressed(ord('C'));
TEOGARB = keyboard_check_pressed(ord('V'));

if(combRoll == 0 &amp;&amp; TEOGARBBOOL == 0){
    if (RIGHT) {
        //walk right
        horizontalSpeed = walkSpeed; 
    
        //face right
        image_xscale = 1;
    }

    if (LEFT) {
        //walk left
        horizontalSpeed = -walkSpeed;
    
        //face left
        image_xscale = -1;
    }

    //stand still
    if (!RIGHT and !LEFT) {
        horizontalSpeed = 0;
    }
}

//combat roll
if (COMBAT_ROLL) {
    combRoll = 1;
    sprite_index = CombatRoll;
    image_index = 0;
    image_speed = .4;
    if(image_xscale == 1){
            horizontalSpeed = walkSpeed+3;
        }
        else if(image_xscale == -1){
            horizontalSpeed = -walkSpeed-3;
        }
}

if(combRoll == 1){
    combRollCount++;
    if(combRollCount == 10){
        image_speed = .6;
        if(image_xscale == 1){
            horizontalSpeed = walkSpeed;
        }
        else if(image_xscale == -1){
            horizontalSpeed = -walkSpeed;
        }
    }
    if(combRollCount == 23){
        combRollCount = 0;
        combRoll = 0;
    }
}

//garbage bag attack
if(GARBAGEBAG){
    sprite_index = garbThrow;
    image_index = 0;
    garbThrowCount = 0;
    garbThrowBool = 1;
    image_speed = .2;
    garbageCreateBool = 0;
}
if(garbThrowBool == 1){
    garbThrowCount++;
    if(garbageCreateBool == 0){
        if(image_xscale == 1){
            instance_create(x-15,y+1,GarbageBagAttack);
        }
        else if(image_xscale == -1){
            instance_create(x+15,y+1,GarbageBagAttack);
        }
        garbageCreateBool = 1;
    }
    if(garbThrowCount == 25){
        sprite_index = GarbRight;
        garbThrowBool = 0;
        garbageCreateBool = 0;
        image_speed = 0;
    }
}

//teo garb shield attack
if(TEOGARB){
    explosionMeetBool = 0;
    TEOGARBBOOL = 1;
    teoGarbBool = 1;
    teoGarbJumpBool = 0;
    teoGarbJumpCounter = 0;
    sprite_index = shieldAttack;
    horizontalSpeed = 0;
    teoGarbId = instance_create(x,y,teoGarbPowerUp);
}
if(teoGarbBool == 1){
    if(!instance_exists(teoGarbId)){
        teoGarbJumpBool = 1;
        teoGarbBool = 0;
        if(image_xscale == 1){
            instance_create(x+200,y-700,GarbageLid);
            instance_create(x+5,y-5,teoGarbPowerUpAgain);
        }
        else if(image_xscale == -1){
            instance_create(x-200,y-700,GarbageLid);
            instance_create(x-5,y-5,teoGarbPowerUpAgain);
        }
    }
}

if(teoGarbJumpBool == 1){
    if(teoGarbJumpCounter == 0){
        if(image_xscale == 1){
            sprite_index = garbFlying;
            horizontalSpeed = 0;
            verticalSpeed = -40;
        }
        else if(image_xscale == -1){
            sprite_index = garbFlying;
            horizontalSpeed = 0;
            verticalSpeed = -40;
        }
    }
    if(image_xscale == 1){
        if(teoGarbJumpCounter == 20){
            horizontalSpeed = 0;
            verticalSpeed = 0;
            grav = 0;
            instance_create(x,y,teoGarbPowerUpOnceAgain);
        }
        else if(teoGarbJumpCounter == 22){
            image_angle = -30;
            x = x + 2;
            y = y - 2;
        }
        else if(teoGarbJumpCounter == 24){
            image_angle = -60;
            x = x + 2;
            y = y - 2;
        }
        else if(teoGarbJumpCounter == 26){
            image_angle = -90;
            x = x + 2;
            y = y - 2;
        }
        else if(teoGarbJumpCounter == 28){
            image_angle = -120;
            x = x + 2;
            y = y - 2;
        }
        else if(teoGarbJumpCounter == 30){
            image_angle = -150;
            x = x + 2;
            y = y - 2;
        }
    }
    else if(image_xscale == -1){
        if(teoGarbJumpCounter == 20){
            horizontalSpeed = 0;
            verticalSpeed = 0;
            grav = 0;
            instance_create(x,y,teoGarbPowerUpOnceAgain);
        }
        else if(teoGarbJumpCounter == 22){
            image_angle = 30;
            x = x - 2;
            y = y - 2;
        }
        else if(teoGarbJumpCounter == 24){
            image_angle = 60;
            x = x - 2;
            y = y - 2;
        }
        else if(teoGarbJumpCounter == 26){
            image_angle = 90;
            x = x - 2;
            y = y - 2;
        }
        else if(teoGarbJumpCounter == 28){
            image_angle = 120;
            x = x - 2;
            y = y - 2;
        }
        else if(teoGarbJumpCounter == 30){
            image_angle = 150;
            x = x - 2;
            y = y - 2;
        }
    }
    
    if(teoGarbJumpCounter == 31){
    verticalSpeed = 20;
    grav = 2;
    }
    if(explosionMeetBool == 0){
        if(place_meeting(x,y+sign(verticalSpeed)+1,grassWallParent)){
            instance_create(x,y,teoGarbLightExplosion);
            with(teoGarbPowerUpOnceAgain){
                instance_destroy();
            }
            explosionMeetBool = 1;
            teoGarbJumpBool = 0;
            TEOGARBBOOL = 0;
            sprite_index = GarbRight;
            image_angle = 0;
        }
    }
    teoGarbJumpCounter++;
}

//make sure to not hit a wall
if (place_meeting(x + sign(horizontalSpeed), y, grassWallParent)){
    //move until hit wall
    if(horizontalSpeed != 0){
        while (!place_meeting(x + sign(horizontalSpeed), y, grassWallParent)){
            x += sign(horizontalSpeed);
        }
    }
    horizontalSpeed = 0;
}

//move character because not using hspeed
x += horizontalSpeed;

//Jumping and Falling
//Check if character is in the air
if (place_meeting(x, y + 1, grassWallParent)){
    ground = 1;
}
else{
    ground = 0;
}

//jump when on the ground
if(SPACE and ground){
    verticalSpeed = jumpSpeed;
}

/**************************************************************/
/******************* NOT SURE ABOUT THIS **********************/
/**************************************************************/
//If we're in air moving up and jump key is released, we remove
//upward motion (so we fall and get variable jump height)


/*if(SPACE_RELEASED and !ground and verticalSpeed &lt; -1){
    verticalSpeed = -1;
}*/



//fall with gravity
if(!ground){
    verticalSpeed += grav;
}

//Now it's more complicated.
//When hitting the ceiling, vertical speed must stop.
//The if statement says, "if we hit the ceiling and are moving up" 
if (place_meeting(x, y + verticalSpeed, grassWallParent) &amp;&amp; verticalSpeed &lt; 0){
    //move up till character hits ceiling.
    while(!place_meeting(x, y + sign(verticalSpeed), grassWallParent)){
        y += sign(verticalSpeed);
    }
    verticalSpeed = 0;
}

//if we move down we have to hit floor
if (place_meeting(x, y + verticalSpeed, grassWallParent) and verticalSpeed &gt; 0) {
    //move so character hits ground
    var cc;
    //this is a counter so infinite loop doesnt happen
    cc = verticalSpeed + 1;
    //move down till hit floor
    while(!place_meeting(x, y + 1, grassWallParent) and cc &gt;= 0){
        y += 1;
    }
    //now ground player
    ground = 1;
    verticalSpeed = 0;
}

//not using vspeed so have to move character manually
y += verticalSpeed
//Animation
if(ground) {
    //if not moving
    if (horizontalSpeed == 0 &amp;&amp; combRoll == 0 &amp;&amp; garbThrowBool == 0 &amp;&amp; TEOGARBBOOL == 0){
        image_speed = 0;
        image_index = 0;
    }
    else{
        if(combRoll == 0 &amp;&amp; garbThrowBool == 0 &amp;&amp; TEOGARBBOOL == 0){
            sprite_index = GarbRight;
            image_speed = 1;
        }
    }
}
else{
    //this means jumping
    image_index = 0;
    image_speed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
